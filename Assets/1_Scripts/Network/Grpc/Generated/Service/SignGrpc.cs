// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sign.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Service.Sign {
  public static partial class Sign
  {
    static readonly string __ServiceName = "service.sign.Sign";

    static readonly grpc::Marshaller<global::Service.Sign.SignInRequest> __Marshaller_service_sign_SignInRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.Sign.SignInRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Service.Sign.SignInResponse> __Marshaller_service_sign_SignInResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Service.Sign.SignInResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Service.Sign.SignInRequest, global::Service.Sign.SignInResponse> __Method_SignIn = new grpc::Method<global::Service.Sign.SignInRequest, global::Service.Sign.SignInResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignIn",
        __Marshaller_service_sign_SignInRequest,
        __Marshaller_service_sign_SignInResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Service.Sign.SignReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Sign</summary>
    public partial class SignClient : grpc::ClientBase<SignClient>
    {
      /// <summary>Creates a new client for Sign</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SignClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Sign that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SignClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SignClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SignClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Service.Sign.SignInResponse SignIn(global::Service.Sign.SignInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignIn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Service.Sign.SignInResponse SignIn(global::Service.Sign.SignInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignIn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Service.Sign.SignInResponse> SignInAsync(global::Service.Sign.SignInRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignInAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Service.Sign.SignInResponse> SignInAsync(global::Service.Sign.SignInRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignIn, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SignClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SignClient(configuration);
      }
    }

  }
}
#endregion
